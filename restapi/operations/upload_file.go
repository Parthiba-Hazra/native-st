// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UploadFileHandlerFunc turns a function with the right signature into a upload file handler
type UploadFileHandlerFunc func(UploadFileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn UploadFileHandlerFunc) Handle(params UploadFileParams) middleware.Responder {
	return fn(params)
}

// UploadFileHandler interface for that can handle valid upload file params
type UploadFileHandler interface {
	Handle(UploadFileParams) middleware.Responder
}

// NewUploadFile creates a new http.Handler for the upload file operation
func NewUploadFile(ctx *middleware.Context, handler UploadFileHandler) *UploadFile {
	return &UploadFile{Context: ctx, Handler: handler}
}

/*
	UploadFile swagger:route POST /files uploadFile

Upload a file
*/
type UploadFile struct {
	Context *middleware.Context
	Handler UploadFileHandler
}

func (o *UploadFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewUploadFileParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// UploadFileCreatedBody upload file created body
//
// swagger:model UploadFileCreatedBody
type UploadFileCreatedBody struct {

	// The ID of the uploaded file
	ID string `json:"id,omitempty"`

	// The URL of the uploaded file
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`
}

// Validate validates this upload file created body
func (o *UploadFileCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UploadFileCreatedBody) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(o.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("uploadFileCreated"+"."+"url", "body", "uri", o.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upload file created body based on context it is used
func (o *UploadFileCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *UploadFileCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UploadFileCreatedBody) UnmarshalBinary(b []byte) error {
	var res UploadFileCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
